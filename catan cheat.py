s = """4 6 9
2 5 12 4
8 7 0 8 10
3 5 10 11
3 6 11"""
l = []
for i in s.split('\n'):
    l.append([int(n) for n in i.split()])
    # print(l[-1])
# l = [
#   [4,6,9],
#  [2,5,12,4],
# [9,8,0,8,10],
#  [3,5,10,11],
#   [3,6,11]
# ]#тот набор выпадений на карте что я пытаюсь просчитать

cases = [i+n+2 for i in range(6) for n in range(6)]#массив всех выпадений шестёрки
#так как i и n будут идти от 0 до 5 включительно, я прибавляю два(но можно было бы их заставить бегать от 1 до 6 вкл., но то как я сделал показалось более умным и запутанным :D )

l1 = []#это будет массив с  числов выпадений из 36 для каждого числа

for i in l:
    l1.append([])
    for n in i:
        l1[-1].append(cases.count(n))
    print(l1[-1])
#   [3, 5, 4]
#  [1, 4, 1, 3]
# [4, 5, 0, 5, 3]
#  [2, 4, 3, 2]
#   [2, 5, 2]

#   [0, 1, 2]
#  [0, 1, 2, 3]
# [0, 1, 2, 3, 4]
#  [0, 1, 2, 3]
#   [0, 1, 2]

# 0  01 1  12 2     23 3  34
# 01 1  12 2  23    3  34 4

a, b, c, d, f = l1 #каждую строку записываю в отдельную переменную для удобства
# print(a, b, c, d, f)

l = [
['  ', a[0]+sum(b[:2]), sum(a[:2])+b[1], a[1]+sum(b[1:3]), sum(a[1:3],b[2]), a[-1]+sum(b[2:])],
[b[0]+sum(c[:2]), sum(b[:2])+c[1], b[1]+sum(c[1:3]), sum(b[1:3], c[2]), b[2]+sum(c[2:4]), sum(b[2:4])+c[3], b[3]+sum(c[3:])], #по идее центральные три можно убрать, если в центре карты ноль
[c[0]+c[1]+d[0], c[1]+d[0]+d[1], c[1]+c[2]+d[1], c[2]+d[1]+d[2], c[2]+c[3]+d[2], c[3]+d[2]+d[3], c[3]+c[4]+d[3]], 
['  ', d[0]+d[1]+f[0],d[1]+f[0]+f[1],d[1]+d[2]+f[1],d[2]+f[1]+f[2],d[2]+d[3]+f[2]]
]
print()
for i in l:
    print(' '.join([str(n) for n in i]))




# indexL = []
# l = [i for i in range(5) for n in (0, 0)]
# for i in range(len(l)-2):
#     indexL.append([l[i], l[i+1], l[i+2]])
# print(indexL)
# for i in [5,7,8,6]:
#     print('_ _ _')
#     for n in range(i):
#         print(indexL[n])